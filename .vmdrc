#
# VMDPrefs Theme File
#
# VMDPrefs was written by:
#    Christopher Mayne
#    Tajkhorshid Laboratory (http://csbmb.beckman.illinois.edu)
#    Beckman Institute for Advanced Science and Technology
#    University of Illinois at Urbana-Champaign
#
# VMDPrefs is currently maintained by:
#    Christopher Mayne | cmayne2@illinois.edu | http://www.ks.uiuc.edu/~mayne
#
# ------------------------------------------------------------------------------
# WARNING: Do not edit this file by hand!
#    VMDPrefs uses a very specific parsing scheme when reading theme files.
#    To avoid potentially corrupting the format, please use the GUI to make
#    any setting changes and write a new theme file.
# ------------------------------------------------------------------------------
#
# turn on lights 0 and 1
light 0 on
light 1 on
light 2 off
light 3 off

#Create material for gold
material add AOGold
material change ambient AOGold 0.750
material change diffuse AOGold 0.850
material change specular AOGold 0.25
material change shininess AOGold 0.250
material change opacity AOGold 1.000

# Create material for terminal nitrogen and carbon atoms
material add AOEnd
material change ambient AOEnd 0.000
material change diffuse AOEnd 0.850
material change specular AOEnd 0.200
material change shininess AOEnd 0.400
material change opacity AOEnd 0.900

# Create eggshell color for terminal C and H
#color add Eggshell
#color change rgb 90 90 90

# set display defaults
display projection orthographic
#display backgroundgradient on
color Display {Background} white
display depthcue off
display antialias on
display ambientocclusion off
# position the stage and axes
axes location lowerleft
stage location off
# position and turn on menus
menu main     move 445 125
menu display  move 395  30
menu graphics move 600 420
menu color    move 125  225
menu files    move 425  825
menu labels   move 125  525
menu render   move 125  525

menu main      on
# menu display  on
menu graphics on
#menu color    on
#menu labels   on
#menu render   on
menu files    off


global env 
set env(VMDFULLSCREEN) 1 
display resize 1040 900
# start the scene a-rockin'
# rock y by 1
#take_picture reset

proc con {} {
    menu tkcon on
    menu tkcon move 930 725
    tkcon font Helvetica -14
}

### Configuration for recording screenshots and movies with AO
user add key q {
light 0 on
light 1 on
light 2 on
light 3 on

menu render on
display ambientocclusion on
display shadows on
display aoambient 1.0
display aodirect 0.8
smoothrep top 3
}

# Selections for atom groups.
set ligand_backbone {all not nucleic and not resname 'Na+' 'Cl-' and not type Au}
set ammonium {type n4 nz}
set ammonium_hydrogen {type h4 hz hn}
set gold_atoms {type Au}
set sulfur_atoms {type ss}
set terminal_alcohol {type oh}
set ether {type os}
set nucleobases {nucleic not backbone and not name "H.*"}
set nucleic_back_not_near {nucleic backbone and not within 5 of type n4 nz c3 oh}
set nucleic_back_near {nucleic backbone and within 5 of type n4 nz c3 oh}

# Resolution of representations
#set ligand_backbone_res
#set end_group_res
#set sulfur_res
#set 


# Clear all existing configurations
proc clearallreps {molid} { 
	set numrep [molinfo top get numreps]
	for {set i 0} {$i < $numrep} {incr i} {mol delrep 0 $molid}
}

# Smooth frames for movie-making
proc smoothall {molid window} {
	set numrep [molinfo top get numreps]
	for {set i 0} {$i < $numrep} {incr i} {mol smoothrep $molid $i $window}
}

# Turn on selection/color updates for a given representation.
proc updaterep {molid} {
	set numrep [molinfo $ molid get numreps]
	mol selupdate $numrep $molid 1
	mol colupdate $numrep $molid 1
}

proc countcontacts {molid cutoff} {
	set molid top
	set mol [molinfo $molid]
	set sel [atomselect $mol {name OP1 and within $cutoff of type nz n4 nx}]
	set frames [molinfo $mol get numframes]
	set fp [open "contact_count.dat" w ]
	for {set i 0} {$i < $frames} {incr i} {
		$sel frame $i
		$sel update
		set n [$sel num]
		puts $fp "$i $n"
	}
	$sel delete
	close $fp
	unset mol sel frames fp i n
}

proc betweenvector {sel1 sel2} {
	set vec1 [measure center $sel1]
	set vec2 [measure center $sel2]
	set bwvector [vecsub $vec1 $vec2]
	return $bwvector
}

#proc pairwisedist {resgroup1 resgroup2} {
#	foreach resnum1 [$resgroup1]

# Built-in command is [measure center $selection [weight mass]]
proc geomcenter {selection} {
        # set the geometrical center to 0
        set gc [veczero]
        # [$selection get {x y z}] returns a list of {x y z} 
        #    values (one per atoms) so get each term one by one
        foreach coord [$selection get {x y z}] {
           # sum up the coordinates
           set gc [vecadd $gc $coord]
        }
        # and scale by the inverse of the number of atoms
        return [vecscale [expr 1.0 /[$selection num]] $gc]
}

proc showAtomAtCenter {selection_criteria} {
    set sel [atomselect top $selection_criteria]
    set com [measure center $sel]
    set x [lindex $com 0]
    set y [lindex $com 1]
    set z [lindex $com 2]
    set center_atom "sqr(x-$x) + sqr(y-$y) + sqr(z - $z) < 5"
    
    # clear screen
    puts "Selection criteria: '$center_atom' "
    clearallreps top

    mol selection $selection_criteria
    mol representation lines
    mol addrep top

    mol selection $center_atom
    mol representation VDW 1.000000 20.000000
    mol color Name
    mol addrep top

    set sel [atomselect top $center_atom]
    set ids [$sel get index]
    puts "Selected atoms: $ids"
}

proc get_total_charge {sel} {
    return [eval "vecadd [$sel get charge]"]
}

proc boxsize {} {
    set box [measure minmax [atomselect top all]]
    set rgyr [measure rgyr [atomselect top all]]

    puts "Box Size: $box"
    puts "Radius of gyration: $rgyr"
}

proc pbcbox {bs} {
    pbc set "$bs" -all -molid top
    pbc box
}

proc nucleicrdf {} {
	set center [ geom_center [atomselect {type Au}]]
	set mask2 [atomselect top "name OP1"]
	set rdf [measure gofr $center $mask2 delta 0.01 rmax 18.0 usepbc 1]
	#set frames [molinfo $mol get numframes]
	#selupdate 0 first 0 last [expr {$frames-1}] step 1]
}
	
# Increase resolution of rep
#proc increase_res {molid resolution 

# Averaging of trajectory with 3-frame window
user add key 5 {
	smoothall top 5
}

# Periodic image hotkeys.
user add key 6 {
	set numrep [molinfo top get numreps]
	for {set i 0} {$i < $numrep} {incr i} {mol showperiodic top $i xy
	mol numperiodic top $i 1}
}
user add key 7 {
	set numrep [molinfo top get numreps]
	for {set i 0} {$i < $numrep} {incr i} {mol showperiodic top $i z
	mol numperiodic top $i 1}
}
user add key 8 {
	set numrep [molinfo top get numreps]
	for {set i 0} {$i < $numrep} {incr i} {mol showperiodic top $i xyz
	mol numperiodic top $i 1}
}

# Increase resolution of all reps.
user add key h {
	set numrep [molinfo top get numreps]
	for {set i 0} {$i < $numrep} {incr i} {mol smoothrep $molid $i}
}

user add key v {
### vdW for All Atoms
	clearallreps top
    mol selection all
    mol representation VDW 1.000000 20.000000
    mol color Name
    mol material Opaque
    mol addrep top
    
 
 }

# To view gold NP with OLM ligands
user add key g {
    clearallreps top

    # Gold Atoms
    mol selection $gold_atoms
    mol representation VDW 1.000000 15.000000
    mol color ColorID 32
    mol material EdgyGlass
    mol addrep top

    # Oleylamine ligands
    mol selection "resname OAB"

    # mol representation lines 5.000
    # mol color ColorID 6
    # mol material Steel

    mol representation Licorice 0.200 10.000 10.000
    mol color ColorID 2
    mol material EdgyShiny

    mol addrep top

    # Solvents
    mol selection "not type Au and not resname OAB"
    mol representation lines 1.000
    mol color Type
    mol addrep top
}

user add key b {
	clearallreps top

    mol selection "not (resname EtO or resname Hx1 or resname MeO)"
    mol addrep top
}


# Configuration for visualizing surface charge distribution on nanoparticles
user add key s {
    #Apply preselected graphical representation
#     set viewplist {}
#     set fixedlist {}
	clearallreps top
	mol selection $ammonium_hydrogen
    mol representation Surf 50.0000
    mol color Charge
    mol material AOChalky
    mol addrep top
}

user add key f {
    clearallreps top 

    # grey bonds
    mol selection {all}
    mol representation CPK 1.300000 0.300000 12.000000 12.000000
    mol color ColorID 2
    mol material Opaque
    mol addrep top

    # Fe1
    mol selection {name F1}
    mol representation CPK 1.500000 0.300000 20.000000 12.000000
    mol color ColorID 1
    mol material Opaque
    mol addrep top

    mol representation CPK 1.500000 0.300000 20.000000 12.000000
    mol color ColorID 20
    mol selection {name F2}
    mol material Opaque
    mol addrep top

    mol selection {name O1}
    mol representation CPK 1.500000 0.300000 20.000000 12.000000
    mol color ColorID 0
    mol material Opaque
    mol addrep top

}

user add key w {
    clearallreps top 

	mol representation Lines 1.000000
	mol color Name
	mol selection {all}
	mol material Opaque
	mol addrep top
}


user add key o {

	mol representation Lines 1.000000
	mol color Name
	mol selection {resname Olm}
	mol material Opaque
	mol addrep top

	mol representation CPK 1.000000 0.300000 12.000000 12.000000
	mol color Name
	mol selection {resid 73}
	mol material Opaque
	mol addrep top

	mol representation VDW 0.500000 12.000000
	mol color Name
	mol selection {name C18}
	mol material Opaque
	mol addrep top

	mol representation VDW 1.000000 12.000000
	mol color Name
	mol selection {resname FeO}
	mol material Opaque
	mol addrep top

	mol representation Lines 1.000000
	mol color Name
	mol selection {resname SiO}
	mol material Opaque
	mol addrep top

	mol representation CPK 1.000000 0.300000 12.000000 12.000000
	mol color Name
	mol selection {type si}
	mol material Opaque
	mol addrep top

	mol representation VDW 0.500000 12.000000
	mol color Name
	mol selection {name O and resname EtO}
	mol material Opaque
	mol addrep top

	mol representation VDW 0.500000 12.000000
	mol color Name
	mol selection {type ht}
	mol material Opaque
	mol addrep top

	mol representation VDW 0.500000 12.000000
	mol color Name
	mol selection {type n3}
	mol material Opaque
	mol addrep top
}


# Center topology (not by mass)
user add key c {
	set num_frames [molinfo top get numframes]
	set sel_all [atomselect top "all"]
	set sel_center [atomselect top "fragment 0"]
	for {set i 0} {$i < $num_frames} {incr i 1} {
	  animate goto $i
	  $sel_all moveby [vecinvert [measure center $sel_center]]
	}
	$sel_all delete
	$sel_center delete
}
user add key d {

	mol representation VDW 0.400000 12.000000
	mol color ColorID 21
	mol selection {name C18}
	mol material Opaque
	mol addrep top

	mol representation VDW 1.000000 12.000000
	mol color ColorID 23
	mol selection {type O1}
	mol material Opaque
	mol addrep top

	mol representation VDW 0.700000 12.000000
	mol color ColorID 4
	mol selection {type n3}
	mol material Opaque
	mol addrep top

	mol representation CPK 1.000000 0.900000 12.000000 12.000000
	mol color Name
	mol selection {resname Olm}
	mol material Opaque
	mol addrep top

	mol representation VDW 1.000000 12.000000
	mol color ColorID 1
	mol selection {type F2 or type F1}
	mol material Opaque
	mol addrep top

}

user add key e {
    clearallreps top
    
    mol representation VDW 0.700000 20.000000
    mol color Name
    mol selection {all}
    mol material Opaque
    mol addrep top

    mol representation VDW 2.000000 20.000000
    mol color ColorID 30
    mol selection {index 538 or index 1008 or index 1895 or index 2365}
    mol material Opaque
    mol addrep top
}

proc take_picture {args} {
  global take_picture
  set res_x 4096
  set res_y 2160
  # when called with no parameter, render the image
  if {$args == {}} {
    set f [format $take_picture(format) $take_picture(frame)]
    # take 1 out of every modulo images
    if { [expr $take_picture(frame) % $take_picture(modulo)] == 0 } {
      render $take_picture(method) -res $res_x $res_y $f
      # call any unix command, if specified
      if { $take_picture(exec) != {} } {
        set f [format $take_picture(exec) $f $f $f $f $f $f $f $f $f $f]
        eval "exec $f"
       }
    }
    # increase the count by one
    incr take_picture(frame)
    return
  }
  lassign $args arg1 arg2
  # reset the options to their initial stat
  # (remember to delete the files yourself
  if {$arg1 == "reset"} {
    set take_picture(frame)  0
    set take_picture(format) "./animate.%04d.tga"
    set take_picture(method) TachyonLOSPRayInternal
    set take_picture(modulo) 1
    set take_picture(exec)    {}
    return
  }
  # set one of the parameters
  if [info exists take_picture($arg1)] {
    if { [llength $args] == 1} {
      return "$arg1 is $take_picture($arg1)"
    }
    set take_picture($arg1) $arg2
    return
  }
  # otherwise, there was an error
  error {take_picture: [ | reset | frame | format  | \
  method  | modulo ]}
}
# to complete the initialization, this must be the first function
# called.  Do so automatically.


proc take_high_res_frame {picname} {
	#set TACHYONPATH '/home/mdmannin/vmd-1.9.3/lib/tachyon/tachyon_LINUXAMD64'
	render TachyonLOSPRayInternal $picname
}

proc make_trajectory_movie_files {} {
	set num [molinfo top get numframes]
	# loop through the frames
	for {set i 0} {$i < $num} {incr i} {
		# go to the given frame
		animate goto $i
                # force display update
                display update 
		# take the picture
		#take_picture reset
        render TachyonLOSPRayInternal $i.tga
        }
}


proc vmd_draw_arrow {mol start end} {
  set middle [vecadd $start [vecscale 0.9 [vecsub $end $start]]]
  graphics $mol cylinder $start $middle radius 0.05
  graphics $mol cone $middle $end radius 0.01 color 3
}

proc vmd_draw_vector {args} {
  set usage { "draw vector {x1 y1 z1} {x2 y2 z2} [scale <s>] [resolution <res>] [radius <r>] [filled <yes/no>]" }

  # defaults
  set scale 2.0
  set res 50
  set radius 0.1
  set filled yes

  if {[llength $args] < 3} {
    error "wrong # args: should be $usage"
  }
  set mol    [lindex $args 0]
  set center [lindex $args 1]
  set vector [lindex $args 2]
  if {[llength $center] != 3 || [llength $vector] != 3} {
    error "wrong type of args: should be $usage"
  }

  foreach {flag value} [lrange $args 3 end] {
    switch -glob $flag {
      scale  {set scale  $value}
      res*   {set res    $value}
      rad*   {set radius $value}
      fill*  {set filled $value}
      default {error "unknown option '$flag': should be $usage" }
    }
  }

  set vechalf [vecscale [expr $scale * 0.5] $vector]
  return [list \
  [graphics $mol color yellow]\
  [graphics $mol cylinder [vecsub $center $vechalf]\
  [vecadd $center [vecscale 0.7 $vechalf]] \
  radius $radius resolution $res filled $filled] \
  [graphics $mol color orange]\
  [graphics $mol cone [vecadd $center [vecscale 0.6 $vechalf]] \
  [vecadd $center $vechalf] radius [expr $radius * 2.5] \
  resolution $res]]
}
